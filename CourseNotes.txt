Asp.Net Core Fundamentals
by Scott Allen on Pluralsight.
Watched Feb 2020, recorded earlier.

I'm using 3.1; his lessons are in 2.1 but things are similar so far.

Adding new items:
Are you know, you can right click, add items.
You can also use CMD. With some package you'll need to download.

"dotnet aspnet-codegenerator"
You need to install it (instructions are on OdeToFood github).
Examples: generate areas, controllers, identities, razorpages, views.
"dotnet aspnet-codegenerator razorpage List Empty -udl -outDir Pages\Restaurants\"
That's just an example of creating a razor page,
naming it, and giving some instructions.
-h for help.

Add a new project.
(You could do anything at all in your code, but creating a new project
both teaches something new and you could re-use the code in another solution.
I wonder how often that actually happens?)
It's a .Net Core Class Library. OdeToFood.Core, for core functions.

Add another project that will provide our data, in lieu of a DB.
Also .Net Core Class Library. OdeToFood.Data.
Add a file type: interface.

Model Binding:
It's how asp.net Core finds info in response to requests.
Two general ways to get to data:
Type in an exact URL or hit a link;
Get input from a user and passing that info to some logic to return the right thing.

HttpContext:
It's in every web page that sends data back and forth and/or makes calls.
It contains info about both the request and response.
Check List.cshtml.cs to see it in action.

Strings as null vs ints as errors:
Pretend you have a http request method like:
public void OnGet(string searchTerm) { //stuff }
If the user passes in nothing, string will default to null and all results are returned.
If the code wants an int, however, and the user passes in nothing,
there will be an error because string is a reference and will default to null,
but int is a value and won't default to null.

More Model Binding: 
searchTerm and SearchTerm in your code are examples of
"input property" where the code only takes in info,
and "two way property" where the code takes in and puts out the same info.

A note on the URL field:
It often doesn't show the full route unless you click inside of it,
especially when it returns results. Eg:
https://localhost:44390/Restaurants/Detail?restaurantId=2 (shows when you click the field)
https://localhost:44390/Restaurants/Detail (shows to your eyes)

On choosing where to put logic or get data:
A few times, prof has shown a way to use html, especially asp.net stuff, right in the html.
But he always backtracks and says the better choice is to put it in the .cs instead.
Then just reference it in the html.

asp.net Core is stateless. There is no place it just automatically updates data.
You need to do it yourself.